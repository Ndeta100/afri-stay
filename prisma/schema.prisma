// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// SCHEMAS FOR USER
model User {
  // Existing fields
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  phoneNumber         String?   @unique
  address             String?

  role                UserRole  @default(USER)
  accounts            Account[]
  bookings            Booking[]
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

enum UserRole {
  ADMIN
  USER
  STAFF
}

// SCHEMA FOR ACCOUNT
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// SCHEMAS FOR AUTHENTICATION
model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// SCHEMAS FOR BOOKING & ROOM
model Room {
  id        String    @id @default(cuid())
  number    String    @unique
  hotelId   String
  type      String
  status    String    // e.g., "Available", "Booked", "Maintenance"
  price     Float
  amenities   Json?     // Room-specific amenities (e.g., WiFi, TV, mini-fridge)
  bookings  Booking[]
  images    Image[]   // Relation to Image model
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  checkIn   DateTime
  checkOut  DateTime
  status    String   // e.g., "Confirmed", "Completed", "Cancelled"
  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
}

model Hotel {
  id          String   @id @default(cuid())
  name        String
  location    String
  description String?
  amenities   Json?    // Can store a JSON object of amenities (e.g., WiFi, pool)
  contactInfo String?
  rooms       Room[]
  images      Image[]  // Assuming an Image model applies to both hotels and rooms
}

//GENERIC SCHEMA FOR IMAGE
model Image {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  hotelId   String?  // Add this field for the relation with Hotel
  roomId    String?  // Keep this field for the relation with Room
  hotel     Hotel?   @relation(fields: [hotelId], references: [id]) // Define the relation to Hotel
  room      Room?    @relation(fields: [roomId], references: [id])  // Confirm the relation to Room

  @@index([hotelId]) // Optional: Improves query performance for images by hotel
  @@index([roomId])  // Optional: Improves query performance for images by room
}
